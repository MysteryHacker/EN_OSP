/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os_project_elionushi;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Elio
 */
public class Task1 extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Task1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea1 = new java.awt.TextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        txttime = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        canvas1 = new java.awt.Canvas();
        jScrollPane2 = new javax.swing.JScrollPane();
        listofprocesses = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButton1.setText("FCFS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SJF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("RR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Enter the name of the process and its respective burst time");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setText("Process name:");

        jLabel3.setText("Process time (seconds):");

        txtname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtname.setForeground(new java.awt.Color(51, 0, 204));

        txttime.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txttime.setForeground(new java.awt.Color(51, 0, 204));

        jButton4.setText("Add");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        result.setEditable(false);
        result.setColumns(20);
        result.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        result.setForeground(new java.awt.Color(0, 0, 204));
        result.setRows(5);
        result.setSelectionColor(new java.awt.Color(204, 0, 255));
        jScrollPane1.setViewportView(result);

        jLabel4.setText("Results:");

        listofprocesses.setEditable(false);
        listofprocesses.setColumns(20);
        listofprocesses.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        listofprocesses.setForeground(new java.awt.Color(51, 0, 204));
        listofprocesses.setRows(5);
        listofprocesses.setSelectionColor(new java.awt.Color(204, 0, 255));
        jScrollPane2.setViewportView(listofprocesses);

        jLabel5.setText("List of processes:");

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(canvas1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(33, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtname, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                    .addComponent(txttime)
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(117, 117, 117)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          
     float[] turnaroundtime= new float [process.size()];
     float[] waitingtime= new float [process.size()];
 
    for(int i=0;i<process.size();i++)
    {
        
       float TA=0;
       float WT=0;
    
       for(int j=i;j>=0;j--)
        {
         TA=TA+process.get(j).uninterrupted_execution_time;
         if(i==0)
         WT=0;     
         if(j==0)
         break;
         WT=WT+process.get(j-1).uninterrupted_execution_time;
         
        }
          result.setText(String.valueOf(process.size())+"\n");   
          result.setText(result.getText()+String.valueOf(i)+"\n");   
          waitingtime[i]=WT;
          turnaroundtime[i]=TA;
    }
       
       result.setText("******Results FCFS******\n\n");   
       result.setText(result.getText()+"Order of execution:\n");
       
       for(int i=0;i<process.size();i++)
       {             
           result.setText(result.getText()+process.get(i).getProcessName()+"("+Math.round(process.get(i).uninterrupted_execution_time)+")\n");           
       }
     
    result.setText(result.getText()+"Waiting times:\n");
      
       for(int i=0;i<process.size();i++)
       {              
           result.setText(result.getText()+process.get(i).getProcessName()+"="+Math.round(waitingtime[i])+"\n");           
       }
          
     result.setText(result.getText()+"Turn around times:\n");
      
       for(int i=0;i<process.size();i++)
       {              
           result.setText(result.getText()+process.get(i).getProcessName()+"="+Math.round(turnaroundtime[i])+"\n");           
       }
       
       for(int i=0;i<process.size();i++)
       {              
           AVG_TAT=AVG_TAT+turnaroundtime[i]; 
           AVG_WT=AVG_WT+waitingtime[i];
       }
       
     result.setText(result.getText()+String.format("AVG TAT=%.2f \n", AVG_TAT/process.size()));
     result.setText(result.getText()+String.format("AVG WT=%.2f \n", AVG_WT/process.size()));
     
     AVG_TAT=0;
     AVG_WT=0;
    
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         try
         {
          Integer.parseInt(txttime.getText());
          name=txtname.getText();
          System.out.println("Enter the burst time of the process:");
          time=Float.parseFloat(txttime.getText());
          Process a=new Process(name,time,time);
          a.uninterrupted_execution_time=a.getBurstTime(); 
          listofprocesses.setText(listofprocesses.getText()+a.getProcessName()+" ("+Math.round(a.getBurstTime())+")\n");
          process.add(a);
          processclone.add(a);
          Integer.parseInt(txttime.getText());
          txttime.setText("");
          txtname.setText("");
          
             jButton1.setEnabled(true);
             jButton2.setEnabled(true);
             jButton3.setEnabled(true);
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(null, "Burst time should be an integer!");
             jButton1.setEnabled(false);
             jButton2.setEnabled(false);
             jButton3.setEnabled(false);
             txttime.setText("");
             txtname.setText("");
         }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            
       
     Collections.sort( processclone, Process.process_burst_time_comparator);
     
     float[] turnaroundtime= new float [process.size()];
     float[] waitingtime= new float [process.size()];
 
    for(int i=0;i<process.size();i++)
    {
       float TA=0;
       float WT=0;
       for(int j=i;j>=0;j--)
        {
         TA=TA+ processclone.get(j).uninterrupted_execution_time;
         if(i==0)
         WT=0;     
         if(j==0)
         break;
         WT=WT+ processclone.get(j-1).uninterrupted_execution_time;
         
        }
       waitingtime[i]=WT;
       turnaroundtime[i]=TA;
    }
     
       result.setText("******Results SJF******\n\n");   
       result.setText(result.getText()+"Order of execution:\n");
       
       for(int i=0;i<process.size();i++)
       {             
           result.setText(result.getText()+ processclone.get(i).getProcessName()+"("+Math.round( processclone.get(i).uninterrupted_execution_time)+")\n");           
       }
     
       result.setText(result.getText()+"Waiting times:\n");
      
       for(int i=0;i<process.size();i++)
       {              
           result.setText(result.getText()+ processclone.get(i).getProcessName()+"="+Math.round(waitingtime[i])+"\n");           
       }
          
       result.setText(result.getText()+"Turn around times:\n");
      
       for(int i=0;i<process.size();i++)
       {              
           result.setText(result.getText()+ processclone.get(i).getProcessName()+"="+Math.round(turnaroundtime[i])+"\n");           
       }
       
       for(int i=0;i<process.size();i++)
       {              
           AVG_TAT=AVG_TAT+turnaroundtime[i]; 
           AVG_WT=AVG_WT+waitingtime[i];
       }
      
     result.setText(result.getText()+String.format("AVG TAT=%.2f \n", AVG_TAT/process.size()));
     result.setText(result.getText()+String.format("AVG WT=%.2f \n", AVG_WT/process.size()));
     AVG_TAT=0;
     AVG_WT=0;
    }//GEN-LAST:event_jButton2ActionPerformed

    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         
        ArrayList<Process> processcloneRR=new ArrayList<Process>();
        ArrayList<Process> executionTimeLine=new ArrayList<Process>();
        
        for(int i=0;i<process.size();i++)
        {
            Process p=new Process(process.get(i).getProcessName(),process.get(i).getBurstTime(),process.get(i).getBurstTime());
            processcloneRR.add(p);
            
        }
        
        float timequanta=4; 
        while (processcloneRR.size()>0)
       {
           
           for(int i=0;i<processcloneRR.size();i++)
           {
         
               if(processcloneRR.get(i).getRemainedTime()-timequanta>=0)
               {
                   processcloneRR.get(i).setRemainedTime(processcloneRR.get(i).getRemainedTime()-timequanta);
                   processcloneRR.get(i).uninterrupted_execution_time=timequanta;
                   Process p= new Process(processcloneRR.get(i).getProcessName(),processcloneRR.get(i).getRemainedTime(),processcloneRR.get(i).getBurstTime(),processcloneRR.get(i).uninterrupted_execution_time);
                   executionTimeLine.add(p);
               }
               else // when the following block is executed it means that the remained time of the Process is 
                    //smaller than the time quanta. Therefore the Process will terminate after the following block is terminated.
               {
                   
                   if(processcloneRR.get(i).getRemainedTime()==0)
                   { 
                       processcloneRR.remove(i);
                       i--;
                   }   
                   else
                   {
                   processcloneRR.get(i).uninterrupted_execution_time=processcloneRR.get(i).getRemainedTime();
                   Process p= new Process(processcloneRR.get(i).getProcessName(),processcloneRR.get(i).getRemainedTime(),processcloneRR.get(i).getBurstTime(),processcloneRR.get(i).uninterrupted_execution_time);
                   executionTimeLine.add(p);
                   processcloneRR.remove(i);
                   i--;
                   }
               }    
           }
       }
       
        
     int[] lastoccurrence = new int [process.size()];
     float[] turnaroundtime= new float [process.size()];
     float[] waitingtime= new float [process.size()];
 
        for(int i=0;i<process.size();i++)
    {
        for(int j=executionTimeLine.size()-1;j>=0;j--)
            if(process.get(i).getProcessName().equals(executionTimeLine.get(j).getProcessName()))
            {lastoccurrence[i]=j;
            break;}                    
    }
    
       for(int i=0;i<process.size();i++)
    {
        float TA=0;
        float WT=0;
        for(int j=lastoccurrence[i];j>=0;j--)
        {
            TA=TA+executionTimeLine.get(j).uninterrupted_execution_time;
            if(executionTimeLine.get(j).getProcessName().equals(process.get(i).getProcessName())==false)
            WT=WT+executionTimeLine.get(j).uninterrupted_execution_time;         
        } 
        turnaroundtime[i]=TA;
        waitingtime[i]=WT;
    }   
    
       
       result.setText("*****Round-Robin Results***** \n\n");   
       result.setText(result.getText()+"Order of execution:\n");
       
         
       for(int i=0;i<executionTimeLine.size();i++)
       {             
           result.setText(result.getText()+executionTimeLine.get(i).getProcessName()+"("+Math.round(executionTimeLine.get(i).uninterrupted_execution_time)+")\n");    
           
       }
     
       result.setText(result.getText()+"Waiting times:\n");
      
       for(int i=0;i<process.size();i++)
       {              
           result.setText(result.getText()+process.get(i).getProcessName()+"="+Math.round(waitingtime[i])+"\n");           
       }
          
       result.setText(result.getText()+"Turn around times:\n");
      
       for(int i=0;i<process.size();i++)
       {              
           result.setText(result.getText()+process.get(i).getProcessName()+"="+Math.round(turnaroundtime[i])+"\n");           
       }
       
       for(int i=0;i<process.size();i++)
       {              
           AVG_TAT=AVG_TAT+turnaroundtime[i]; 
           AVG_WT=AVG_WT+waitingtime[i];
       }
       
     result.setText(result.getText()+String.format("AVG TAT=%.2f \n", AVG_TAT/process.size()));
     result.setText(result.getText()+String.format("AVG WT=%.2f \n", AVG_WT/process.size()));
     processcloneRR.clear();
     AVG_TAT=0;
     AVG_WT=0;
    
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       process.clear();
       processclone.clear();
       result.setText("");
       listofprocesses.setText("");
       txttime.setText("");
       txtname.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Task1().setVisible(true);
                
            }
        });
    }
    
    
    public ArrayList<Process> process=new ArrayList<Process>();
    public ArrayList<Process> processclone=new ArrayList<Process>();
    public float time;
    public String name;
    public float AVG_TAT=0;
    public float AVG_WT=0;   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JTextArea listofprocesses;
    public javax.swing.JTextArea result;
    private java.awt.TextArea textArea1;
    public javax.swing.JTextField txtname;
    public javax.swing.JTextField txttime;
    // End of variables declaration//GEN-END:variables
}
